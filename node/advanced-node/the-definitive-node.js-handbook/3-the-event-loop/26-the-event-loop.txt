/** The event loop **/

Your JavaScript code runs single threaded. There is just one thing happening at a time.
This is a limitation that’s actually very helpful, as it simplifies a lot of how you program without worrying about
concurrency issues.
You just need to pay attention to how you write your code and avoid anything that could block the thread, like
synchronous network calls or infinite loops.
Generally, in most browsers there is an event loop for every browser tab, to make every process isolated and avoid a
web page with infinite loops or heavy processing to block your entire browser.
The environment manages multiple concurrent event loops, to handle API calls for example. Web Workers run in their own
event loop as well.
You mainly need to be concerned that your code will run on a single event loop, and write code with this thing in mind
to avoid blocking it.

/* Blocking the event loop */
Almost all the I/O primitives in JavaScript are non-blocking. Network requests, Node.js file system operations, and so
on. Being blocking is the exception, and this is why JavaScript is based so much on callbacks, and more recently on
promises and async/await.

/* The Call Stack */
The call stack is a LIFO queue (Last In, First Out).
The event loop continuously checks the call stack to see if there’s any function that needs to run.
While doing so, it adds any function call it finds to the call stack and executes each one in order.

/* The Message Queue */
When setTimeout() is called, the Browser or Node.js starts the timer. Once the timer expires, in this case immediately
as we put 0 as the timeout, the callback function is put in the Message Queue.
The Message Queue is also where user-initiated events like click and keyboard events
The loop gives priority to the call stack. It first processes everything it finds in the call stack, and once there’s
nothing in there, it goes to pick up things in the event queue.

/* ES6 Job Queue */
ECMAScript 2015 introduced the concept of the Job Queue, which is used by Promises (also introduced in ES6/ES2015).
It’s a way to execute the result of an async function as soon as possible, rather than being put at the end of the call
stack.
Promises that resolve before the current function ends will be executed right after the current function.
