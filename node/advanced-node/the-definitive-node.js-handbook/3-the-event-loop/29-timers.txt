/** Timers **/

/* setTimeout */
When writing JavaScript code, you might want to delay the execution of a function. This is the job of setTimeout.
You can specify a callback function to execute later, and a value expressing how much later you want it to run,
in milliseconds:

setTimeout(() => {
  // runs after 2 seconds
}, 2000)

or:

const myFunction = (firstParam, secondParam) => {
  // do something
}

setTimeout(myFunction, 2000, firstParam, secondParam);

setTimeout() returns the timer id. This is generally not used, but you can store this id, and clear it if you want to delete this scheduled function execution:

const id = setTimeout(() => {
  // should run after 2 seconds
}, 2000)
// I changed my mind
clearTimeout(id)


/* zero delay */
If you specify the timeout delay to 0, the callback function will be executed as soon as possible, but after the current
function execution.
This is especially useful to avoid blocking the CPU on intensive tasks and let other functions be executed while
performing a heavy calculation, by queuing functions in the scheduler.


/* setInterval() */
setInterval() is a function similar to setTimeout() with a difference. Instead of running the callback function once, it will run it forever, at the specific time interval you specify (in milliseconds):

setInterval(() => {
  // runs every 2 seconds
}, 2000)

Itâ€™s common to call clearInterval inside the setInterval callback function, to let it auto-determine if it should run
again or stop.

const interval = setInterval(function() {
  if (App.somethingIWait === 'arrived') {
    clearInterval(interval)
    // otherwise do things
  }
}, 100)


/* Recursive setTimeout */
setInterval starts a function every n milliseconds, without any consideration about when a function finished its execution.

To avoid this, you can schedule a recursive setTimeout to be called when the callback function finishes:

const myFunction = () => {
  // do something
  setTimeout(myFunction, 1000)
}
setTimeout(
  myFunction()
}, 1000)


/** setImmediate() **/
Node.js also provides setImmediate(), which is equivalent to using setTimeout(() => {}, 0), mostly used to work with
the Node.js Event Loop.