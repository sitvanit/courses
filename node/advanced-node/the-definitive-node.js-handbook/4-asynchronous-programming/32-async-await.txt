/** Async and Await **/

JavaScript evolved in a very short time from callbacks to promises (ES2015), and since ES2017 asynchronous JavaScript
is even simpler with the async/await syntax.

Async functions are a combination of promises and generators, and basically, they are a higher level abstraction over
promises. Let me repeat: async/await is built on promises.

They reduce the boilerplate around promises, and the “don’t break the chain” limitation of chaining promises.

Promises were introduced to solve the famous callback hell problem, but they introduced complexity on their own, and
syntax complexity.

async await make the code look like it’s synchronous, but it’s asynchronous and non-blocking behind the scenes.


/* How it works? */

An async function returns a promise (Even if it’s not doing so explicitly), like in this example:

const doSomethingAsync = () => {
    return new Promise((resolve) => {
        setTimeout(() => resolve('I did something'), 3000)
    })
}

When you want to call this function you prepend await, and the calling code will stop until the promise is resolved or
rejected.


/* The code is much simpler to read */

As you can see in the example above, our code looks very simple. Compare it to code using plain promises, with chaining
and callback functions.


/* Easier debugging */

Debugging promises is hard because the debugger will not step over asynchronous code.
async/await makes this very easy because to the compiler it’s just like synchronous code.




