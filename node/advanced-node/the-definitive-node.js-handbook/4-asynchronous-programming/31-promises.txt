/** Promises **/

Promises are one way to deal with asynchronous code in JavaScript, without writing too many callbacks in your code.

A promise is commonly defined as a proxy for a value that will eventually become available.
Although being around for years, they have been standardized and introduced in ES2015, and now they have been superseded
in ES2017 by async functions.
Async functions use the promises API as their building block, so understanding them is fundamental even if in newer code
you’ll likely use async functions instead of promises.


/* How promises work, in brief */
Once a promise has been called, it will start in pending state.
This means that the caller function continues the execution, while it waits for the promise to do its own processing,
and give the caller function some feedback.
At this point, the caller function waits for it to either return the promise in a resolved state, or in a rejected state,
but as you know JavaScript is asynchronous — so the function continues its execution while the promise does it work.


/* Creating a promise */

let done = true

const isItDoneYet = new Promise(
  (resolve, reject) => {
    if (done) {
      const workDone = 'Here is the thing I built'
      resolve(workDone)
    } else {
      const why = 'Still working on something else'
      reject(why)
    }
  }
)


/* Consuming a promise */

const checkIfItsDone = () => {
  isItDoneYet
    .then((ok) => {
      console.log(ok)
    })
    .catch((err) => {
      console.error(err)
    })
}


/* Chaining promises */

const status = (response) => {
  if (response.status >= 200 && response.status < 300) {
    return Promise.resolve(response)
  }
  return Promise.reject(new Error(response.statusText))
}

const json = (response) => response.json()

fetch('/todos.json')
  .then(status)
  .then(json)
  .then((data) => { console.log('Request succeeded with JSON response', data) })
  .catch((error) => { console.log('Request failed', error) })


/* Handling errors */

When anything in the chain of promises fails and raises an error or rejects the promise, the control goes to the nearest
catch() statement down the chain.

new Promise((resolve, reject) => {
  throw new Error('Error')
}).catch((err) => { console.error(err) })

or

new Promise((resolve, reject) => {
  reject('Error')
}).catch((err) => { console.error(err) })


/* Cascading errors */

If inside the catch() you raise an error, you can append a second catch() to handle it, and so on.

new Promise((resolve, reject) => {
  throw new Error('Error')
})
  .catch((err) => { throw new Error('Error') })
  .catch((err) => { console.error(err) })


/* Promise.all() */

If you need to synchronize different promises together, Promise.all() helps you define a list of promises, and execute
something when they are all resolved.

const f1 = fetch('/something.json')
const f2 = fetch('/something2.json')

Promise.all([f1, f2]).then(([res1, res2]) => {
    console.log('Results', res1, res2)
})
.catch((err) => {
  console.error(err)
})


/* Promise.race() */

Promise.race() runs when the first of the promises you pass to it resolves, and it runs the attached callback just once,
with the result of the first promise resolved.

const first = new Promise((resolve, reject) => {
    setTimeout(resolve, 500, 'first')
})
const second = new Promise((resolve, reject) => {
    setTimeout(resolve, 100, 'second')
})
Promise.race([first, second]).then((result) => {
  console.log(result) // second
})


/* Common error, Uncaught TypeError: undefined is not a promise */
If you get the Uncaught TypeError: undefined is not a promise error in the console, make sure you use new Promise()
instead of just Promise().

