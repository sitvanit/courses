/** Asynchronous Programming and Callbacks **/

Computers are asynchronous by design.
Asynchronous means that things can happen independently of the main program flow.
In the current consumer computers, every program runs for a specific time slot, and then it stops its execution to let
another program continue its execution. This thing runs in a cycle so fast that’s impossible to notice, and we think our
computers run many programs simultaneously, but this is an illusion (except on multiprocessor machines).
Programs internally use interrupts, a signal that’s emitted to the processor to gain the attention of the system.
I won’t go into the internals of this, but just keep in mind that it’s normal for programs to be asynchronous, and halt
their execution until they need attention, and the computer can execute other things in the meantime. When a program is
waiting for a response from the network, it cannot halt the processor until the request finishes.

Normally, programming languages are synchronous, and some provide a way to manage asynchronicity, in the language or
through libraries. C, Java, C#, PHP, Go, Ruby, Swift, Python, they are all synchronous by default. Some of them handle
asynchronicity by using threads, spawning a new process.

JavaScript is synchronous by default, and is single threaded. This means that code cannot create new threads and run in
parallel.


/* Callbacks */
You can’t know when a user is going to click a button, so what you do is define an event handler for the click event.
This event handler accepts a function, which will be called when the event is triggered:

document.getElementById('button').addEventListener('click', () => {
  //item clicked
})
This is the so-called callback.

A callback is a simple function that’s passed as a value to another function, and will only be executed when the event
happens. We can do this because JavaScript has first-class functions, which can be assigned to variables and passed
around to other functions (called higher-order functions).

Callbacks are used everywhere, not just in DOM events.
One common example is by using timers:

setTimeout(() => {
  // runs after 2 seconds
}, 2000)


/* Handling errors in callbacks */
the first parameter in any callback function is the error object — error-first callbacks.

fs.readFile('/file.json', (err, data) => {
  if (err !== null) {
    //handle error
    console.log(err)
    return
  }
  //no errors, process data
  console.log(data)
})


/* The problem with callbacks */
Callbacks are great for simple cases!
However, every callback adds a level of nesting. When you have lots of callbacks, the code starts to be complicated very
quickly - callback hell.


/* Alternatives to callbacks */
Promises (ES6)
Async/Await (ES8)
