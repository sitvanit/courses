/** How to exit from a Node.js program **/

/** ctrl c **/
When running a program in the console you can close it with ctrl-C

/** process.exit({exitStatusCode}) **/
the most drastic one, you’re better off not using it.
'process' is a core module.
When Node.js runs this line, the process is immediately forced to terminate.
This means that any callback that’s pending, any network request still being sent, any file system access, or
processes writing to stdout or stderr — all is going to be ungracefully terminated right away.
By default the exit code is 0.
You can also set the process.exitCode property: process.exitCode = 1

/** signals **/
What are signals? Signals are a Portable Operating System Interface (POSIX) intercommunication system: a notification
sent to a process in order to notify it of an event that occurred.

/** SIGTERM signal **/
A program will gracefully exit when all the processing is done.
Many times with Node.js we start servers, and those program are never going to end.
If you call process.exit(), any currently pending or running request is going to be aborted. This is not nice.
In this case you need to send the command a SIGTERM signal, and handle that with the process signal handler:
process.on('SIGTERM', () => {
  app.close(() => {
    console.log('Process terminated')
  })
})
or:
process.kill(process.pid, 'SIGTERM')

/** SIGKILL SIGNAL **/
SIGKILL is the signals that tells a process to immediately terminate, and would ideally act like process.exit().
